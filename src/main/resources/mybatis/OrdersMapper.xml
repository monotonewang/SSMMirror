<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.demo.mybatis.relationmapper.mapper.OrdersMapper">
    <resultMap id="BaseResultMap" type="com.demo.mybatis.relationmapper.po.Orders">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="number" property="number" jdbcType="VARCHAR"/>
        <result column="createtime" property="createtime" jdbcType="TIMESTAMP"/>
        <result column="note" property="note" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, user_id, number, createtime, note
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="com.demo.mybatis.relationmapper.po.OrdersExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from orders
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from orders
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from orders
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.demo.mybatis.relationmapper.po.OrdersExample">
        delete from orders
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.demo.mybatis.relationmapper.po.Orders">
    insert into orders (id, user_id, number, 
      createtime, note)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{number,jdbcType=VARCHAR}, 
      #{createtime,jdbcType=TIMESTAMP}, #{note,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.demo.mybatis.relationmapper.po.Orders">
        insert into orders
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="number != null">
                number,
            </if>
            <if test="createtime != null">
                createtime,
            </if>
            <if test="note != null">
                note,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="number != null">
                #{number,jdbcType=VARCHAR},
            </if>
            <if test="createtime != null">
                #{createtime,jdbcType=TIMESTAMP},
            </if>
            <if test="note != null">
                #{note,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.demo.mybatis.relationmapper.po.OrdersExample"
            resultType="java.lang.Integer">
        select count(*) from orders
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update orders
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=INTEGER},
            </if>
            <if test="record.number != null">
                number = #{record.number,jdbcType=VARCHAR},
            </if>
            <if test="record.createtime != null">
                createtime = #{record.createtime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.note != null">
                note = #{record.note,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update orders
        set id = #{record.id,jdbcType=INTEGER},
        user_id = #{record.userId,jdbcType=INTEGER},
        number = #{record.number,jdbcType=VARCHAR},
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
        note = #{record.note,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.demo.mybatis.relationmapper.po.Orders">
        update orders
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="number != null">
                number = #{number,jdbcType=VARCHAR},
            </if>
            <if test="createtime != null">
                createtime = #{createtime,jdbcType=TIMESTAMP},
            </if>
            <if test="note != null">
                note = #{note,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.demo.mybatis.relationmapper.po.Orders">
    update orders
    set user_id = #{userId,jdbcType=INTEGER},
      number = #{number,jdbcType=VARCHAR},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      note = #{note,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <!--一对一查询，resultType-->
    <select id="findOrderUser" resultType="com.demo.mybatis.relationmapper.po.OrderCustom">
	select orders.*,user.username,`user`.sex from orders,user where orders.user_id=user.id
  </select>
    <!--一对一查询，resultMap-->
    <resultMap id="orderUserResultMap" type="com.demo.mybatis.relationmapper.po.Orders">
        <id column="id" property="id"></id>
        <result column="number" property="number"></result>
        <result column="createtime" property="createtime"></result>
        <!--javaType为java的类型
            property为orders里面的类型-->
        <association javaType="com.demo.mybatis.relationmapper.po.User" property="user" autoMapping="true">
            <id column="user_id" property="id"></id>
        </association>
    </resultMap>
    <select id="findResultMapOrder" resultMap="orderUserResultMap">
        select orders.*,user.username,`user`.sex from orders,user where orders.user_id=user.id
    </select>
    <!--一对多查询-->
    <!--select * from orders left join orderdetail  on orders.id=orderdetail.orders_id LEFT JOIN user on user.id=orders.user_id where number='1000010'-->
    <resultMap id="findOrderDetailNumberMap" type="com.demo.mybatis.relationmapper.po.Orders">
        <id column="id" property="id"/>
        <result column="number" property="number"/>
        <result column="user_id" property="userId"/>
        <result column="note" property="note"/>
        <result column="createtime" property="createtime"/>
        <association javaType="com.demo.mybatis.relationmapper.po.User" property="user" autoMapping="true">
            <id column="user_id" property="id"/>
            <result column="username" property="username"/>
            <result column="sex" property="sex"/>
        </association>
        <collection property="orderdetails" javaType="List" ofType="com.demo.mybatis.relationmapper.po.Orderdetail"
                    autoMapping="true">
            <id column="orders_id" property="ordersId"/>
            <result column="items_num" property="itemsNum"/>
            <result column="items_id" property="itemsId"/>
        </collection>
    </resultMap>
    <select id="findOrderDetailNumber" parameterType="String" resultMap="findOrderDetailNumberMap">
        select * from orders,orderdetail,user where orders.id=orderdetail.orders_id and orders.user_id=user.id and orders.number=#{number}
    </select>
    <!--       select * from orders left join orderdetail  on orders.id=orderdetail.orders_id LEFT JOIN user on user.id=orders.user_id where number=#{number}-->

    <!--select * from orders,orderdetail,user where orders.id=orderdetail.orders_id and orders.user_id=user.id and orders.number='1000010'-->
    <!--//查询下单人的信息并查询订单详情中的商品数据-->
    <resultMap id="findOrderMoreResultMap" type="com.demo.mybatis.relationmapper.po.Orders"
               extends="findOrderDetailNumberMap">
        <collection property="itemses" javaType="List" ofType="com.demo.mybatis.relationmapper.po.Items"
                    autoMapping="true">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
            <result column="price" property="price"/>
            <result column="detail" property="detail"/>
        </collection>
    </resultMap>

    <select id="findOrderMore" resultMap="findOrderMoreResultMap">
      select * from orders,orderdetail,user,items where orders.user_id=user.id and  orders.id=orderdetail.orders_id and orderdetail.items_id=items.id
    </select>
    <!--多对多查询-->

</mapper>