<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.demo.mybatis.relationmapper.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.demo.mybatis.relationmapper.po.User">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="birthday" property="birthday" jdbcType="DATE"/>
        <result column="sex" property="sex" jdbcType="CHAR"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
    </resultMap>
    <!--开启二级缓存-->
    <cache/>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, username, birthday, sex, address
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="com.demo.mybatis.relationmapper.po.UserExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.demo.mybatis.relationmapper.po.UserExample">
        delete from user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.demo.mybatis.relationmapper.po.User">
    insert into user (id, username, birthday, 
      sex, address)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{birthday,jdbcType=DATE}, 
      #{sex,jdbcType=CHAR}, #{address,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.demo.mybatis.relationmapper.po.User">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="birthday != null">
                birthday,
            </if>
            <if test="sex != null">
                sex,
            </if>
            <if test="address != null">
                address,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="birthday != null">
                #{birthday,jdbcType=DATE},
            </if>
            <if test="sex != null">
                #{sex,jdbcType=CHAR},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.demo.mybatis.relationmapper.po.UserExample"
            resultType="java.lang.Integer">
        select count(*) from user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update user
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.username != null">
                username = #{record.username,jdbcType=VARCHAR},
            </if>
            <if test="record.birthday != null">
                birthday = #{record.birthday,jdbcType=DATE},
            </if>
            <if test="record.sex != null">
                sex = #{record.sex,jdbcType=CHAR},
            </if>
            <if test="record.address != null">
                address = #{record.address,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update user
        set id = #{record.id,jdbcType=INTEGER},
        username = #{record.username,jdbcType=VARCHAR},
        birthday = #{record.birthday,jdbcType=DATE},
        sex = #{record.sex,jdbcType=CHAR},
        address = #{record.address,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.demo.mybatis.relationmapper.po.User">
        update user
        <set>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="birthday != null">
                birthday = #{birthday,jdbcType=DATE},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=CHAR},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.demo.mybatis.relationmapper.po.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=DATE},
      sex = #{sex,jdbcType=CHAR},
      address = #{address,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <select id="testLevelOneCache" parameterType="int" resultType="user">
    select * from user where id=#{id}
  </select>

    <select id="testUpdateCache" parameterType="int" resultType="com.demo.mybatis.relationmapper.po.User">
    select * from user where id=#{id}
  </select>
    <update id="updateUser" parameterType="com.demo.mybatis.relationmapper.po.User" flushCache="false">
    UPDATE user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
  </update>
    <!--没有开启延迟加载-->
    <!--select * from user where id in (select user_id from orders where number='1000011')-->
    <!--select * from orders where user_id in (select id from user where id<'10')-->
    <resultMap id="lazyOrderResultMap" type="com.demo.mybatis.relationmapper.po.User" autoMapping="true">
        <id column="id" property="id"></id>
        <result column="username" property="username"></result>
        <result column="birthday" property="birthday"></result>
        <result column="sex" property="sex"></result>
        <result column="address" property="address"></result>
        <!--<association property="id" column="id" select="getUser">-->

        <!--</association>-->
    </resultMap>
    <select id="lazyLoading" resultMap="lazyOrderResultMap">
        select u.* from user as u,orders o where u.id =o.user_id and  o.number=#{number}
    </select>

    <!--开启延迟加载测试1-->
    <!--select * from user where id=(select user_id from orders where number='1000010')-->

    <!--select  (select orders.user_id from orders where orders.number='1000010' and user.id=orders.user_id ) from user where id=1-->
    <resultMap id="lazyOrderResultMap1" type="com.demo.mybatis.relationmapper.po.User" autoMapping="true">
        <id column="id" property="id"></id>
        <result column="user_id" property="userId"></result>
        <result column="number" property="userId"></result>
        <result column="createtime" property="createtime"></result>
        <association property="id" column="id" select="getUser">

        </association>
    </resultMap>
    <select id="getUser" parameterType="int" resultType="com.demo.mybatis.relationmapper.po.User">
         select user_id from orders where number=#{id}
    </select>
    <select id="lazyLoading1" resultMap="lazyOrderResultMap1">
        select * from user where id=#{number}
    </select>

    <!--开启延迟加载测试2-->
    <!--select orders.*,(select user.username from user where user.id=orders.user_id) username from orders-->
    <resultMap id="OrderCustomLoading" type="com.demo.mybatis.relationmapper.po.Orders">
        <id column="id" property="id"></id>
        <result column="user_id" property="userId"></result>
        <result column="number" property="number"></result>
        <result column="createtime" property="createtime"></result>
        <result column="note" property="note"></result>
        <association property="user" select="findUserById" column="user_id"></association>
    </resultMap>
    <select id="findUserById" parameterType="int" resultType="com.demo.mybatis.relationmapper.po.User">
        select user.username from user where user.id=#{value}
    </select>
    <select id="lazyLoadingTest2" resultMap="OrderCustomLoading">
        select orders.* from orders
    </select>

</mapper>